#!/usr/bin/env zsh


rr() {
	result=`fc -ln 1 | fzf`
	echo "Running:" $result
	eval $result
}

check_command() {
	if ! [[ "$(command -v $1)" =~ (.*/$1) ]]; then
	    echo "${2:-WARN}: \"$1\" is not installed. $4"
	    return ${3:--1}
	fi
}

flag_apt() {
	file_path=$HOME/dotfiles/.tag_installed_apt
	if [ ! -f $file_path ]; then
	    echo "Setting apt packages as installed."
	    touch $file_path
	else
	    echo "Setting apt packages as not installed."
	    rm $file_path
	fi
}

install_spacevim() {
	curl -sLf https://spacevim.org/install.sh > $HOME/spacevim_install.sh
	chmod +x $HOME/spacevim_install.sh
	$HOME/spacevim_install.sh
	rm $HOME/spacevim_install.sh
}

update_zinit() {
	zinit self-update
	zinit update
}

fix_compinit() {
	echo "If missing operand error is thrown, all is well."
	compaudit | xargs chmod go-w
}

cld() {
	cd $@
	ls -a
}

qh() {
	grep --color=always "$*" "$HISTFILE" | less -RX
}

qt() {
	grep -ir --color=always "$*" . | less -RX
}

lss() {
	find $1 -maxdepth 1 -type l -ls
}

no_zsh() {
	export OVERRIDE=1
	exec bash
}

wf() {
	echo $#
	if [[ "$1" == "s" && $# -eq 2 ]]; then
	    sudo less +F "$2"
	else
	    less +F "$1"
	fi
}

tf() {
	echo $#
	if [[ "$1" == "s" && $# -eq 2 ]]; then
	    sudo tail -f "$2"
	else
	    tail -f "$1"
	fi
}

dec() {
	echo "Decrypting file: $1"
	cp $1 $1.tmp
	openssl bf-cbc -d -a -in $1 -out $1.tmp
	rm $1
	mv $1.tmp $1
}

enc() {
	echo "Encrypting file: $1"
	cp "$1" "$1.tmp"
	openssl bf-cbc -a -salt -in "$1" -out "$1.tmp"
	rm "$1"
	mv "$1.tmp" "$1"
}

pidport() {
	lsof -ti :$1
}

show_banner() {
	line=$(printf '%*s' "$(tput cols)" | tr ' ' '=')
	bold=$(tput bold)
	normal=$(tput sgr0)
	
	user=$(whoami)
	user=$(tr '[:lower:]' '[:upper:]' <<< ${user:0:1})${user:1}
	
	uptime=$(uptime -p 2>/dev/null || uptime)
	hostname=$(hostname -I 2>/dev/null || echo '(not available)')
	
	# echo $line
	# if command -v figlet >/dev/null; then
	#     figlet -ck "XDS : Terminal"
	# else
	#     echo "Can't display fancy banner. Please install figlet."
	# fi
	
	# echo $line
	# echo "    Hello, ${bold}$user${normal}!"
	echo $line
	echo "    Time\t| $(date +"%T %P %Z - %a, %e %b %G - week %V.")"
	echo "    Uptime\t| "$uptime
	echo $line
	echo "    Local IP\t| $hostname"
	# disabled for faster load time
	# echo "    External IP\t: $(dig +short myip.opendns.com @resolver1.opendns.com)"
	echo $line
}

pyclean() {
	find . -type f -name "*.py[co]" -delete
	find . -type d -name "__pycache__" -delete
}

sshad() {
	setopt extended_glob
	ssh-add $HOME/.ssh/^(*.pub|known_hosts|config|authorized_keys)
	unsetopt extended_glob
}

sshaa() {
	setopt extended_glob
	eval `ssh-agent -s`
	ssh-add $HOME/.ssh/^(*.pub|known_hosts|config|authorized_keys)
	unsetopt extended_glob
}

dk_cs() {
	docker container ls -a --format "table {{.ID}} ## {{.Image}} {{.Command}} {{.CreatedAt}} {{.Status}} {{.Ports}} {{.RunningFor}} {{.Names}} ##{{json .}}" | fzf --delimiter='##' --with-nth=2 | awk -F'##' '{print $1}'
}

dk_ci() {
	docker inspect $(docker container ls -a --format "table {{.ID}} ## {{.Image}} {{.Command}} {{.CreatedAt}} {{.Status}} {{.Ports}} {{.RunningFor}} {{.Names}} ##{{json .}}" | fzf --delimiter='##' --with-nth=2 | awk -F'##' '{print $1}')
}

xpx() {
	export $($@ | xargs -d '\n')
}

xpnx() {
	export $(nxc $@ | xargs -d '\n')
}

xps() {
	set -a
	source <($@)
	set +a
}

xpns() {
	set -a
	source <(nxc $@)
	set +a
}
