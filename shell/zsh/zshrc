#!/usr/bin/env zsh

# profile zsh
# zmodload zsh/zprof

# Set up the prompt

# autoload -Uz promptinit
# promptinit
# prompt adam1

setopt histignorealldups sharehistory

# Use emacs keybindings even if our EDITOR is set to vi
bindkey -e

# Keep 2000 lines of history within the shell and save it to $HOME/.zsh_history:
HISTSIZE=2000
SAVEHIST=2000
HISTFILE=$HOME/user_data/.zsh_history

. $HOME/dotfiles/shell/generic/p10k.zsh

# Use modern completion system
autoload -Uz compinit
compinit -u  # disabled warning for insecure directories. As you can imagine, this is insecure.

zstyle ':completion:*' auto-description 'specify: %d'
zstyle ':completion:*' completer _expand _complete _correct _approximate
zstyle ':completion:*' format 'Completing %d'
zstyle ':completion:*' group-name ''
zstyle ':completion:*' menu select=2
if command -v dircolors >/dev/null; then
  eval "$(dircolors -b)"
fi
zstyle ':completion:*:default' list-colors ${(s.:.)LS_COLORS}
zstyle ':completion:*' list-colors ''
zstyle ':completion:*' list-prompt %SAt %p: Hit TAB for more, or the character to insert%s
zstyle ':completion:*' matcher-list '' 'm:{a-z}={A-Z}' 'm:{a-zA-Z}={A-Za-z}' 'r:|[._-]=* r:|=* l:|=*'
zstyle ':completion:*' menu select=long
zstyle ':completion:*' select-prompt %SScrolling active: current selection at %p%s
zstyle ':completion:*' use-compctl false
zstyle ':completion:*' verbose true

zstyle ':completion:*:*:kill:*:processes' list-colors '=(#b) #([0-9]#)*=0=01;31'
zstyle ':completion:*:kill:*' command 'ps -u $USER -o pid,%cpu,tty,cputime,cmd'


# load global env
. $HOME/dotfiles/shell/zsh/global_env.zsh


if ! [ -d $DOTFILES_DIR ]; then
  # can only happen if using a different directory
  echo "WARN: Dotfiles dir could not be found."
  return -1
fi


# load custom functions
. $ZSH_CONFIG_DIR/functions.zsh


# load local env if it exists
if [ -f $HOME/local_env.zsh ]; then
  . $HOME/local_env.zsh  # TODO: create a function to source_if_exist_with_opt_warn
fi

if ! check_command git FATAL ; then
  return -1
fi

if check_command figlet INFO ; then
  show_banner
fi

# check usual apps
check_command rg
check_command fasd
check_command fzf INFO 0 "Run 'sudo apt-get install fzf' to install it."
check_command docker INFO 0 "Check the web how to install it"
check_command nvim INFO 0 "Run 'sudo apt-get install neovim' to install it."
check_command make
check_command tig INFO 0 "Run 'sudo apt-get install tig' to install it."
check_command npm INFO 0 "Run 'nvm install node' to install it."
check_command python


if ! [ -d $SPACEVIM_CHECK_DIR ]; then
  echo "INFO: SpaceVim is not installed. Run 'install_spacevim' to install it and run 'SPUpdate' if needed."
fi


# load aliases
. $DOTFILES_DIR/shell/generic/aliases


# install zplug
if ! [ -d $ZPLUG_HOME ]; then
  git clone https://github.com/zplug/zplug $ZPLUG_HOME
fi

# load zplug config
. $ZSH_CONFIG_DIR/zplugrc

# options:
setopt histignorespace  # history ignores commands that start with space

# enable autojump. TODO: perhaps not needed?
# TODO: create install command for autojump + autojump.rs
# . /usr/share/autojump/autojump.sh

# sys envs
export PATH="$HOME/.cargo/bin:$HOME/.local/bin:$PATH"
# required for autojump to work properly
# export PROMPT_COMMAND="${PROMPT_COMMAND:+$PROMPT_COMMAND ;} history -a"

# check commands from the sys venv
check_command pypager INFO 0 "run 'pip install pypager' to install it."
check_command pgcli INFO 0 "run 'sudo apt-get install pgcli' to install it."

# install completion for bash
# autoload -U +X bashcompinit && bashcompinit

# install completion for consul
# complete -o nospace -C /usr/bin/consul consul

# to use the starship theme, uncomment
# eval "$(starship init zsh)"

export NVM_DIR="$HOME/.nvm"
[ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"  # This loads nvm
[ -s "$NVM_DIR/bash_completion" ] && \. "$NVM_DIR/bash_completion"  # This loads nvm bash_completion

export PYENV_ROOT="$HOME/.pyenv"
export PATH="$PYENV_ROOT/bin:$PATH"
eval "$(pyenv init -)"
eval "$(pyenv virtualenv-init -)"

# fasd init
eval "$(fasd --init auto)"

# poetry init
source $HOME/.poetry/env
