#!/usr/bin/env zsh

# profile zsh
# zmodload zsh/zprof

# Set up the prompt

# autoload -Uz promptinit
# promptinit
# prompt adam1

setopt histignorealldups sharehistory

# Use emacs keybindings even if our EDITOR is set to vi
bindkey -e

# Keep 2000 lines of history within the shell and save it to $HOME/.zsh_history:
HISTSIZE=2000
SAVEHIST=2000
HISTFILE=$HOME/user_data/.zsh_history

. $HOME/dotfiles/shell/generic/p10k.zsh

# Use modern completion system
autoload -Uz compinit
compinit -u  # disabled warning for insecure directories. As you can imagine, this is insecure.

# todo: fix these if needed
zstyle ':completion:*' auto-description 'specify: %d'
zstyle ':completion:*' completer _expand _complete _correct _approximate
zstyle ':completion:*' format 'Completing %d'
zstyle ':completion:*' group-name ''
zstyle ':completion:*' menu select=2
if command -v dircolors >/dev/null; then
  eval "$(dircolors -b)"
fi
zstyle ':completion:*:default' list-colors ${(s.:.)LS_COLORS}
zstyle ':completion:*' list-colors ''
zstyle ':completion:*' list-prompt %SAt %p: Hit TAB for more, or the character to insert%s
zstyle ':completion:*' matcher-list '' 'm:{a-z}={A-Z}' 'm:{a-zA-Z}={A-Za-z}' 'r:|[._-]=* r:|=* l:|=*'
zstyle ':completion:*' menu select=long
zstyle ':completion:*' select-prompt %SScrolling active: current selection at %p%s
zstyle ':completion:*' use-compctl false
zstyle ':completion:*' verbose true

zstyle ':completion:*:*:kill:*:processes' list-colors '=(#b) #([0-9]#)*=0=01;31'
zstyle ':completion:*:kill:*' command 'ps -u $USER -o pid,%cpu,tty,cputime,cmd'

# options:
setopt histignorespace  # history ignores commands that start with space


# load global env
. $HOME/dotfiles/shell/zsh/global_env.zsh


if ! [ -d $DOTFILES_DIR ]; then
  # can only happen if using a different directory
  echo "WARN: Dotfiles dir could not be found."
  return -1
fi

# load local env if it exists
if [ -f $HOME/local_env.zsh ]; then
  . $HOME/local_env.zsh  # TODO: create a function to source_if_exist_with_opt_warn
fi


# load aliases
# . $DOTFILES_DIR/.direnv/functions_config
# . $DOTFILES_DIR/.direnv/aliases_config

# load commands
# export PATH="$DOTFILES_DIR/.direnv/commands:$PATH"

source $DOTFILES_DIR/shell/zsh/lib.zsh

if ! check_command git FATAL ; then
  return -1
fi

if check_command figlet INFO ; then
  show_banner
fi

if [ ! -f $HOME/dotfiles/.tag_installed_apt ] && check_command apt ; then
  echo "-------------------------------------------------"
  echo "Attempting to install packages .."
#    direnv \
  sudo apt-get install -y \
    ripgrep \
    fzf \
    neovim \
    tig \
    python3 \
    python3-pip \
    python-is-python3 \
    exa \
    curl \
    wget \
    rsync \
    tmux

  flag_apt
  echo "Done installing apt packages. To run again, run 'flag_apt' and then 'zreload'."
  echo "-------------------------------------------------"
fi

# sys envs
export PATH="$HOME/.cargo/bin:$HOME/.local/bin:$PATH"

# check usual apps
check_command rg INFO 0 "Run 'sudo apt-get install ripgrep' to install it."
check_command fasd
check_command fzf INFO 0 "Run 'sudo apt-get install fzf' to install it."
# check_command docker INFO 0 "Check the web how to install it"
check_command nvim INFO 0 "Run 'sudo apt-get install neovim' to install it."
# check_command make
check_command tig INFO 0 "Run 'sudo apt-get install tig' to install it."
check_command npm INFO 0 "Run 'nvm install node' to install it."
check_command python INFO 0 "Run 'sudo apt-get install python3 python3-pip python-is-python3' to install it."
# check_command pip INFO 0 "Run 'sudo apt-get install python3 python3-pip python-is-python3' to install it."

# not used
# check_command pypager INFO 0 "run 'pip install pypager' to install it."
#
# override pager
export PAGER='less -SRXF'
check_command pgcli INFO 0 "run 'sudo apt-get install pgcli' to install it."

check_command exa INFO 0 "run 'sudo apt-get install exa' or 'cargo install exa' to install it."
check_command ipython INFO 0 "run 'pip install ipython' to install it."
check_command pylint INFO 0 "run 'pip install pylint' to install it."
check_command virtualenv INFO 0 "run 'pip install virtualenv' to install it."
check_command curl INFO 0 "Run 'sudo apt-get install curl' to install it."
check_command wget INFO 0 "Run 'sudo apt-get install wget' to install it."
# todo: fix, these don't work at the moment
# check_command pyenv
# check_command nvm
check_command poetry
# $ check_command direnv INFO 0 "Run 'sudo apt-get install direnv' to install it."
# check_command docker-compose INFO 0 "Run 'sudo apt-get install docker-compose' to install it."
check_command rsync INFO 0 "Run 'sudo apt-get install rsync' to install it."


# if ! [ -d $SPACEVIM_CHECK_DIR ]; then
#   echo "INFO: SpaceVim is not installed. Run 'install_spacevim' to install it and run 'SPUpdate' if needed."
# fi

### Added by Zinit's installer
if [[ ! -f $HOME/.local/share/zinit/zinit.git/zinit.zsh ]]; then
    print -P "%F{33} %F{220}Installing %F{33}ZDHARMA-CONTINUUM%F{220} Initiative Plugin Manager (%F{33}zdharma-continuum/zinit%F{220})â€¦%f"
    command mkdir -p "$HOME/.local/share/zinit" && command chmod g-rwX "$HOME/.local/share/zinit"
    command git clone https://github.com/zdharma-continuum/zinit "$HOME/.local/share/zinit/zinit.git" && \
        print -P "%F{33} %F{34}Installation successful.%f%b" || \
        print -P "%F{160} The clone has failed.%f%b"
fi

source "$HOME/.local/share/zinit/zinit.git/zinit.zsh"
autoload -Uz _zinit
(( ${+_comps} )) && _comps[zinit]=_zinit
### End of Zinit's installer chunk

# check_command zinit

# zinit config and plugins
. $ZSH_CONFIG_DIR/zinit_config.zsh
echo "INFO: Finished loading zinit. To update, run 'update_zinit'."

# configure nvm
export NVM_DIR="$HOME/.nvm"
[ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"  # This loads nvm
[ -s "$NVM_DIR/bash_completion" ] && \. "$NVM_DIR/bash_completion"  # This loads nvm bash_completion

# configure pyenv
export PYENV_ROOT="$HOME/.pyenv"
export PATH="$PYENV_ROOT/bin:$PATH"
eval "$(pyenv init -)"
# eval "$(pyenv virtualenv-init -)"

# fasd init
eval "$(fasd --init auto)"

export PATH="/usr/local/opt/gettext/bin:$PATH"

export FZF_DEFAULT_OPTS='--height 40% --layout=reverse --border'
[ -f ~/.fzf.zsh ] && source ~/.fzf.zsh

# enable direnv
# eval "$(direnv hook zsh)"

echo "-------------------------------------------------"
# echo "INFO: Done loading zsh. Run 's.!' to search for aliases and functions."
echo "INFO: Run 'init_local' to initialize the local env config."
echo "-------------------------------------------------"


# -----------------------------------------------------------------------------
# setup for enter/exit cd hooks
# NOTE: changing these require a full shell restart. zreload doesn't do the trick correctly
# -----------------------------------------------------------------------------
alias init_local="cp $HOME/dotfiles/example.zsh.local.sh ./.zsh.local.sh"

load_cd_functions_hook() {
    local cd_functions_script=".zsh.local.sh"
    # check file exists, is regular file and is readable:
    if [[ -f "$cd_functions_script" && -r "$cd_functions_script" ]]; then
        echo "Loading local config .."

        # defaults, to prevent errors in case they were not defined
        enter_hook() {}

        exit_hook() {}

        # Store the initial state of functions, aliases, and environment variables
        initial_functions=(echo ${(ok)functions})
        initial_functions="$initial_functions print_sourced"
        initial_aliases=(echo ${(ok)aliases})

        # these need to be here, before the parameters, to avoid picking them up as "new"
        local_functions=""
        local_aliases=""
        local_parameters=""
        initial_parameters=""

        initial_parameters=(echo ${(ok)parameters})


        # define the function to print loaded functions, aliases and envs
        print_sourced() {
            for func in ${(ok)functions}; do
                if [[ ! "$initial_functions" == *"$func"* ]]; then
                    local_functions="$local_functions $func"
                fi
            done

            [[ ! -z $local_functions ]] && echo "Loaded functions:$local_functions"

            for alias in ${(ok)aliases}; do
                if [[ ! "$initial_aliases" == *"$alias"* ]]; then
                    local_aliases="$local_aliases $alias"
                fi
            done

            [[ ! -z $local_aliases ]] && echo "Loaded aliases:$local_aliases"

            for var in ${(ok)parameters}; do
                if [[ ! "$initial_parameters" == *"$var"* ]]; then
                    local_parameters="$local_parameters $var"
                fi
            done

            [[ ! -z $local_parameters ]] && echo "Loaded variables:$local_parameters"
        }

        # source the local env script
        source "$cd_functions_script"

        # print what was loaded
        print_sourced

        # run the enter hook
        enter_hook

    fi
}

# Set up the chpwd hook to call the load_cd_functions function
autoload -Uz add-zsh-hook
add-zsh-hook chpwd load_cd_functions_hook

# Define the cleanup function to be called before each prompt
cleanup_cd_functions_hook() {
    local current_dir=${PWD}

    # Check if we have moved away from the previous directory
    # todo: possible improvement would be to extend this check to allow for children to keep the local config. although current impl. works too
    if [[ "$current_dir" != "$PREV_PWD" ]]; then
        local cd_functions_script="$PREV_PWD/.zsh.local.sh"

        if [[ -f "$cd_functions_script" && -r "$cd_functions_script" ]]; then
            echo "Unloading local config .."

            source "$cd_functions_script"
            exit_hook

            # cleanup own functions
            unset -f enter_hook
            unset -f exit_hook
        fi

        # Update the previous directory
        export PREV_PWD="$current_dir"
    fi
}

# Set up the precmd hook to call the cleanup function
autoload -Uz add-zsh-hook
add-zsh-hook precmd cleanup_cd_functions_hook

# -----------------------------------------------------------------------------